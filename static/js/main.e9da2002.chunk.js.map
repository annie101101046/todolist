{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","todoList","length","map","todo","react_default","a","createElement","className","key","id","onClick","content","AddTodo","state","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","App","filter","Math","random","concat","Object","toConsumableArray","src_Todos","src_AddTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAqCeA,EAnCD,SAAAC,GAGR,IAFFC,EAEED,EAFFC,MACAC,EACEF,EADFE,WAGMC,EAAWF,EAAMG,OACnBH,EAAMI,IAAI,SAAAC,GACN,OAASC,EAAAC,EAAAC,cAAA,OACDC,UAAY,kBAChBC,IACIL,EAAKM,IAETL,EAAAC,EAAAC,cAAA,QACKI,QACD,WACIX,EAAWI,EAAKM,MAHxB,IAMIN,EAAKQ,QANT,KALK,OAgBXP,EAAAC,EAAAC,cAAA,uDAGN,OAASF,EAAAC,EAAAC,cAAA,OACDC,UAAY,oBADX,IAEDP,EAFC,MCmBEY,6MA1CXC,MAAQ,CACJF,QAAS,MAGbG,aAAe,SAACC,GACZC,EAAKC,SAAS,CACVN,QAASI,EAAEG,OAAOC,WAI1BC,aAAe,SAACL,GACZA,EAAEM,iBACFL,EAAKM,MAAMC,QAAQP,EAAKH,OACxBG,EAAKC,SAAS,CACVN,QAAS,8EAKb,OAASP,EAAAC,EAAAC,cAAA,WAELF,EAAAC,EAAAC,cAAA,QACKkB,SACDC,KAAKL,cAEThB,EAAAC,EAAAC,cAAA,wDAJA,IAK0BF,EAAAC,EAAAC,cAAA,SACpBoB,KAAO,OACbC,SACIF,KAAKX,aAETK,MACIM,KAAKZ,MAAMF,UAXf,KAFK,YApBKiB,aCqDPC,6MAlDbhB,MAAQ,CACNf,MAAO,CAAC,CACJW,GAAI,EACJE,QAAS,sBAEX,CACEF,GAAI,EACJE,QAAS,oBAIfZ,WAAa,SAACU,GACZ,IAAMX,EAAQkB,EAAKH,MAAMf,MAAMgC,OAAO,SAAA3B,GACpC,OAAOA,EAAKM,KAAOA,IAErBO,EAAKC,SAAS,CACZnB,aAKJyB,QAAU,SAACpB,GACTA,EAAKM,GAAKsB,KAAKC,SACf,IAAIlC,EAAK,GAAAmC,OAAAC,OAAAC,EAAA,EAAAD,CAAOlB,EAAKH,MAAMf,OAAlB,CAAyBK,IAClCa,EAAKC,SAAS,CACZnB,mFAKF,OAASM,EAAAC,EAAAC,cAAA,OACHC,UAAY,sBAChBH,EAAAC,EAAAC,cAAA,MACGC,UAAY,oBADf,sDAFO,IAG6CH,EAAAC,EAAAC,cACpD8B,EADoD,CAC9CtC,MACJ2B,KAAKZ,MAAMf,MAEbC,WACE0B,KAAK1B,aARA,IAUJK,EAAAC,EAAAC,cACH+B,EADG,CACKd,QACNE,KAAKF,UAZA,YA/BKK,aCMEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQxC,EAAAC,EAAAC,cAAEuC,EAAF,MAAYC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e9da2002.chunk.js","sourcesContent":["import React from 'react'\n\nconst Todos = ({\n    todos,\n    deleteTodo\n}) => {\n\n    const todoList = todos.length ? (\n        todos.map(todo => {\n            return ( <\n                div className = \"collection-item\"\n                key = {\n                    todo.id\n                } >\n                <\n                span onClick = {\n                    () => {\n                        deleteTodo(todo.id)\n                    }\n                } > {\n                    todo.content\n                } < /span> < /\n                div >\n            )\n        })\n    ) : ( <\n        div > 沒事做了ㄏㄏ!! < /div >\n    )\n    return ( <\n        div className = \"todos collection\" > {\n            todoList\n        } <\n        /div>\n    )\n\n}\n\nexport default Todos","import React, {\n    Component\n} from 'react'\n\nclass AddTodo extends Component {\n    state = {\n        content: ''\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            content: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state);\n        this.setState({\n            content: ''\n        })\n    }\n\n    render() {\n        return ( <\n            div >\n            <\n            form onSubmit = {\n                this.handleSubmit\n            } >\n            <\n            label > 新增工作事項: < /label> <\n            input type = \"text\"\n            onChange = {\n                this.handleChange\n            }\n            value = {\n                this.state.content\n            }\n            /> < /\n            form > <\n            /div>\n        )\n    }\n\n}\n\nexport default AddTodo","import React, {\n  Component\n} from 'react';\nimport Todos from './Todos'\nimport AddTodo from './AddTodo'\n\nclass App extends Component {\n  state = {\n    todos: [{\n        id: 1,\n        content: '寫程式'\n      },\n      {\n        id: 2,\n        content: '睡覺'\n      }\n    ]\n  }\n  deleteTodo = (id) => {\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id\n    });\n    this.setState({\n      todos\n    })\n\n  }\n\n  addTodo = (todo) => {\n    todo.id = Math.random();\n    let todos = [...this.state.todos, todo]\n    this.setState({\n      todos\n    })\n  }\n\n  render() {\n    return ( <\n      div className = \"todo-app container\" >\n      <\n      h1 className = \"center blue-text\" > 今天要幹嘛呢ㄏㄏ < /h1> <\n      Todos todos = {\n        this.state.todos\n      }\n      deleteTodo = {\n        this.deleteTodo\n      }\n      /> <\n      AddTodo addTodo = {\n        this.addTodo\n      }\n      /> < /\n      div >\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}